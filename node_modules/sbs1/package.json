{
  "name": "sbs1",
  "description": "Parsing of SBS-1 Mode S ADS-B messages.",
  "author": {
    "name": "John Wiseman",
    "email": "jjwiseman@gmail.com",
    "url": "http://lemondronor.com"
  },
  "version": "0.2.3",
  "main": "./index.js",
  "dependencies": {
    "optimist": "~0.6.0"
  },
  "devDependencies": {
    "tap": "~0.4.0"
  },
  "scripts": {
    "test": "tap --stderr ./test/*.js"
  },
  "bin": {
    "sbs1": "bin/sbs1.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/wiseman/node-sbs1.git"
  },
  "bugs": {
    "url": "https://github.com/wiseman/node-sbs1/issues"
  },
  "keywords": [
    "ads-b",
    "aircraft",
    "aviation",
    "avionics",
    "kinetic avionics",
    "mode s",
    "sbs-1",
    "virtual radar"
  ],
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "node-sbs1\n=========\n\nThis is a node.js module that parses ASCII messages containing Mode S\n[ADS-B](http://en.wikipedia.org/wiki/Automatic_dependent_surveillance-broadcast)\naircraft data that is in \"SBS-1 BaseStation port 30003\" format.  This\nformat has become a semi-standard way of sending ADS-B data.\n\n[![build status](https://secure.travis-ci.org/wiseman/node-sbs1.png)](http://travis-ci.org/wiseman/node-sbs1)\n\nSBS-1 messages are in a simple comma-delimited format.  Here are some\nexamples of the messages this module parses:\n\n```\nSEL,,496,2286,4CA4E5,27215,2010/02/19,18:06:07.710,2010/02/19,18:06:07.710,RYR1427\nID,,496,7162,405637,27928,2010/02/19,18:06:07.115,2010/02/19,18:06:07.115,EZY691A\nAIR,,496,5906,400F01,27931,2010/02/19,18:06:07.128,2010/02/19,18:06:07.128\nSTA,,5,179,400AE7,10103,2008/11/28,14:58:51.153,2008/11/28,14:58:51.153,RM\nCLK,,496,-1,,-1,2010/02/19,18:18:19.036,2010/02/19,18:18:19.036\nMSG,1,145,256,7404F2,11267,2008/11/28,23:48:18.611,2008/11/28,23:53:19.161,RJA1118,,,,,,,,,,,\nMSG,2,496,603,400CB6,13168,2008/10/13,12:24:32.414,2008/10/13,12:28:52.074,,,0,76.4,258.3,54.05735,-4.38826,,,,,,0\nMSG,3,496,211,4CA2D6,10057,2008/11/28,14:53:50.594,2008/11/28,14:58:51.153,,37000,,,51.45735,-1.02826,,,0,0,0,0\nMSG,4,496,469,4CA767,27854,2010/02/19,17:58:13.039,2010/02/19,17:58:13.368,,,288.6,103.2,,,-832,,,,,\nMSG,5,496,329,394A65,27868,2010/02/19,17:58:12.644,2010/02/19,17:58:13.368,,10000,,,,,,,0,,0,0\nMSG,6,496,237,4CA215,27864,2010/02/19,17:58:12.846,2010/02/19,17:58:13.368,,33325,,,,,,0271,0,0,0,0\nMSG,7,496,742,51106E,27929,2011/03/06,07:57:36.523,2011/03/06,07:57:37.054,,3775,,,,,,,,,,0\nMSG,8,496,194,405F4E,27884,2010/02/19,17:58:13.244,2010/02/19,17:58:13.368,,,,,,,,,,,,0\n```\n\nThere's some documentation of the message format at\nhttp://www.homepages.mcb.net/bones/SBS/Article/Barebones42_Socket_Data.htm\n\nHere are some examples of using the module:\n\n```\n// Parse a string containing an SBS1 message.\nvar sbs1 = require('sbs1');\nvar s = 'MSG,3,496,211,4CA2D6,10057,2008/11/28,14:53:50.594,2008/11/28,14:58:51.153,,37000,,,51.45735,-1.02826,,,0,0,0,0';\nvar msg = sbs1.parseSbs1Message(s);\nif (msg.message_type === sbs1.MessageType.TRANSMISSION &&\n    msg.transmission_type === sbs1.TransmissionType.ES_AIRBORNE_POS) {\n  console.log('coords: ' + msg.lat + ', ' + msg.lon);\n}\n```\n\n```\n// Connect to a server at localhost:30003 that is sending messages in SBS1\n// format.  You can pass an options object containing host and port to\n// createClient to connect to a different server/port.\nvar sbs1 = require('sbs1');\nvar client = sbs1.createClient();\nclient.on('message', function(msg) {\n  if (msg.message_type === sbs1.MessageType.TRANSMISSION &&\n      msg.transmission_type === sbs1.TransmissionType.ES_AIRBORNE_POS) {\n    console.log('coords: ' + msg.lat + ', ' + msg.lon);\n  }\n});\n```\n\n## Parsed messages\n\nParsed messages have the following fields:\n\n|Field            |Description                                                          |\n|-----------------|---------------------------------------------------------------------|\n|message_type     |See [MessageType](#MessageType).                                     |\n|transmission_type|See [TransmissionType](#TransmissionType).                           |\n|session_id       |`String`. Database session record number.                            |\n|aircraft_id      |`String`. Database aircraft record number.                           |\n|hex_ident        |`String`. 24-bit ICACO ID, in hex.                                   |\n|flight_id        |`String`. Database flight record number.                             |\n|generated_date   |`String`. Date the message was generated.                            |\n|generated_time   |`String`. Time the message was generated.                            |\n|logged_date      |`String`. Date the message was logged.                               |\n|logged_time      |`String`. Time the message was logged.                               |\n|callsign         |`String`. Eight character flight ID or callsign.                     |\n|altitude         |`Integer`. [Mode C] [1] Altitude relative to 1013 mb (29.92\" Hg).    |\n|ground_speed     |`Integer`. Speed over ground.                                        |\n|track            |`Integer`. Ground track angle.                                       |\n|lat              |`Float`. Latitude.                                                   |\n|lon              |`Float`. Longitude                                                   |\n|vertical_rate    |`Integer`. Climb rate.                                               |\n|squawk           |`String`. Assigned [Mode A] [1] squawk code.                         |\n|alert            |`Boolean`. Flag to indicate that squawk has changed.                 |\n|emergency        |`Boolean`. Flag to indicate emergency code has been set.             |\n|spi              |`Boolean`. Flag to indicate Special Position Indicator has been set. |\n|is_on_ground     |`Boolean`. Flag to indicate ground squat switch is active.           |\n\n[1]: http://en.wikipedia.org/wiki/Aviation_transponder_interrogation_modes#Mode_A_and_Mode_C\n\nNot all message/transmission types will have values for all fields.\nMissing values will be represented by `null` or `undefined` (an empty\ncomma-delimited value is `null`).\n\nParsed messages have `generated_timestamp()` and `logged_timestamp()`\nmethods that parse the corresponding date and time fields and return\n`Date` objects.\n\n\n## <a name=\"MessageType\">MessageType</a>\n\nThere are 6 types of SBS-1 messages represented by the `MessageType` enum:\n\n|Enum              |Value   |\n|------------------|--------|\n|`SELECTION_CHANGE`|`\"SEL\"` |\n|`NEW_ID`          |`\"ID\"`  |\n|`NEW_AIRCRAFT`    |`\"AIR\"` |\n|`STATUS_AIRCRAFT` |`\"STA\"` |\n|`CLICK`           |`\"CLK\"` |\n|`TRANSMISSION`    |`\"MSG\"` |\n\n`SELECTION_CHANGE`, `NEW_ID`, `NEW_AIRCRAFT`, `STATUS_CHANGE`, and\n`CLK` are indicate changes in the state of the SBS-1 software and\naren't typically used by other systems.\n\n`TRANSMISSION` messages contain information sent by aircraft.\n\n\n## <a name=\"TransmissionType\">TransmissionType</a>\n\nThere are 8 subtypes of transmission messages, specified by the\n`TransmissionType` enum:\n\n|Enum                   |Value|Description                    |Spec        |\n|-----------------------|-----|-------------------------------|------------|\n|`ES_IDENT_AND_CATEGORY`|`1`  |ES identification and category |DF17 BDS 0,8|\n|`ES_SURFACE_POS`       |`2`  |ES surface position message    |DF17 BDS 0,6|\n|`ES_AIRBORNE_POS`      |`3`  |ES airborne position message   |DF17 BDS 0,5|\n|`ES_AIRBORNE_VEL`      |`4`  |ES airborne velocity message   |DF17 BDS 0,9|\n|`SURVEILLANCE_ALT`     |`5`  |Surveillance alt message       |DF4, DF20   |\n|`SURVEILLANCE_ID`      |`6`  |Surveillance ID message        |DF5, DF21   |\n|`AIR_TO_AIR`           |`7`  |Air-to-air message             |DF16        |\n|`ALL_CALL_REPLY`       |`8`  |All call reply                 |DF11        |\n\nOnly `ES_SURFACE_POS` and `ES_AIRBORNE_POS` transmissions will have\nposition (latitude and longitude) information.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/wiseman/node-sbs1",
  "_id": "sbs1@0.2.3",
  "dist": {
    "shasum": "3bd779a9ebc7e144a7000d93b77be79d64e0fe5e",
    "tarball": "http://registry.npmjs.org/sbs1/-/sbs1-0.2.3.tgz"
  },
  "_from": "sbs1@",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "wiseman",
    "email": "jjwiseman@gmail.com"
  },
  "maintainers": [
    {
      "name": "wiseman",
      "email": "jjwiseman@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "3bd779a9ebc7e144a7000d93b77be79d64e0fe5e",
  "_resolved": "https://registry.npmjs.org/sbs1/-/sbs1-0.2.3.tgz"
}
