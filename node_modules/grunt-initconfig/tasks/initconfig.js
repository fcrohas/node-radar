/*

grunt-initconfig
https://github.com/pismute/grunt-initconfig

Copyright (c) 2013 Changwoo Park
Licensed under the MIT license.
*/


(function() {
  module.exports = function(grunt) {
    var called, getExt, path, read, readAndMerge, _;
    _ = grunt.util._;
    path = require('path');
    getExt = function(filename) {
      var ext;
      ext = path.extname(filename || '').split('.');
      return ext[ext.length - 1];
    };
    readAndMerge = function(options) {
      var config, files;
      files = grunt.file.expand(options, options.files);
      grunt.verbose.writeflags(files, 'Files');
      config = {};
      files.forEach(function(filename) {
        var dirs, ext, fullname;
        ext = getExt(filename);
        dirs = (path.dirname(filename)).split(path.sep);
        fullname = path.join(options.cwd, path.sep, filename);
        grunt.log.debug(JSON.stringify({
          filename: filename,
          ext: ext,
          dirs: dirs,
          fullname: fullname
        }));
        return config = _.merge(config, read(dirs, ext, fullname));
      });
      return config;
    };
    read = function(dirs, ext, fullname) {
      var config, dir, holder, which, _i, _len;
      holder = config = {};
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        dir = dirs[_i];
        if (dir !== '.') {
          holder[dir] = holder[dir] || {};
          holder = holder[dir];
        }
      }
      which = {
        json: function() {
          return grunt.file.readJSON(fullname);
        },
        yaml: function() {
          return grunt.file.readYAML(fullname);
        },
        cson: function() {
          var cson;
          cson = require('cson');
          return cson.parseFileSync(fullname);
        },
        js: function() {
          var js;
          js = require(path.resolve(fullname));
          if (_.isFunction(js)) {
            return js(grunt);
          } else {
            return js;
          }
        },
        coffee: function() {
          var coffee;
          coffee = require(path.resolve(fullname));
          if (_.isFunction(coffee)) {
            return coffee(grunt);
          } else {
            return coffee;
          }
        },
        md: function() {
          var mdconf;
          mdconf = require('mdconf');
          return mdconf(grunt.file.read(fullname));
        }
      };
      holder = _.merge(holder, which[ext].call());
      return config;
    };
    called = false;
    grunt.registerTask('initconfig', 'Your task description goes here.', function() {
      var config, options;
      if (called) {
        grunt.log.writeln('Skipped');
        return {};
      } else {
        called = true;
      }
      options = this.options({
        cwd: '.initconfig',
        files: '**/*.{json,yaml,cson,js,coffee,md}'
      });
      grunt.log.debug(JSON.stringify(options, false, '  '), 'Options');
      config = _.merge(grunt.config.get(), readAndMerge(options));
      grunt.config.init(config);
      return grunt.log.debug(JSON.stringify(grunt.config.get(), false, '  '));
    });
    return {
      getExt: getExt,
      readAndMerge: readAndMerge,
      read: read
    };
  };

}).call(this);
